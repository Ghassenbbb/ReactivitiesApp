{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","name","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModel","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","head","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBottom","baisc","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","isLoggedIn","Divider","horizontal","width","marginTop","attached","active","has","onChange","Reveal","animated","Content","visible","hidden","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","Icon","styles","borderColor","borderWidth","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","animation","duration","Transition","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCrooper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","Preview","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.e8dcc29e.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage : number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 5) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination))\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n\r\n}, (error: AxiosError) => {\r\n    const { data, status, config, headers } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if(status === 401 && headers['www-authenticate'].startsWith['Bearer error=\"invalid_token\"']) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error')\r\n            break;\r\n    }\r\n})\r\n\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/Activities', {params}).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/Activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post('/Activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put(`/Activities/${activity.id}`, activity),\r\n    delete: (id: String) => requests.del(`/Activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/Account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/Account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/Account/register', user),\r\n    fbLogin : (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username : string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: String;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues){\r\n        Object.assign(this, init)\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string ='';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue : string = '';\r\n\r\n    constructor (activity?:ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = true;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id)\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings: boolean = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => { this.activeTab = activeTab; }\r\n\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username !== username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout : any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities')\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken){\r\n            apiLogin(this.fbAccessToken)\r\n        }else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    private startRefreshTokenTimer(user: User){\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout((this.refreshTokenTimeout));\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore : CommonStore;\r\n    userStore : UserStore;\r\n    modalStore : ModalStore;\r\n    profileStore : ProfileStore;\r\n    commentStore : CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore : new CommonStore(),\r\n    userStore : new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore : new ProfileStore(),\r\n    commentStore : new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string |null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModel = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Container, Menu, Button, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact head='true'>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} baisc color='red' content={errors.error}/>}/>\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i : any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName:'', username:'', email: '', password: '', error: null }}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))\r\n            }\r\n            validationSchema={Yup.object({\r\n                displayName : Yup.string().required(),\r\n                username : Yup.string().required(),\r\n                email : Yup.string().required(),\r\n                password : Yup.string().required(),\r\n\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center'/>\r\n                    <MyTextInput name='displayName' placeholder='Display name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Segment, Image, Divider } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModel(<LoginForm />)} to='/login' size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModel(<RegisterForm />)} to='/login' size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                            loading={userStore.fbLoading}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: '28px' }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') ||new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        updateFollowing(username, !profile.following);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button fluid color='teal' content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button fluid basic \r\n                color={profile.following ? 'red' : 'green'} \r\n                content={profile.following ? 'Unfollow' : 'Follow'} \r\n                loading={loading}\r\n                onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'blue',\r\n        borderWidth: 2\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/assets/user.png'} \r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                                />\r\n                        </List.Item>}\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Item, Button, Segment, Icon, Label } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default function ActivityListItem({activity} : Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign : 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}> {activity.host?.displayName} </Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {!activity.isHost && activity.isGoing && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View'/>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n\r\n                            {activities.map(activity => (\r\n                                <ActivityListItem key={activity.id} activity={activity} />\r\n                            ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n\r\n                ) : (\r\n\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n\r\n                )}\r\n\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\n\r\nexport default function LoadingComponent({inverted = true, content ='Loading...'} : Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drink'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value = {field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder = {props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>\r\n                    {meta.error}\r\n                </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Form, Formik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\nimport {v4 as uuid} from \"uuid\";\r\n\r\nexport default observer(function ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { loadActivity, createActivity, updateActivity, loadingInitial, setLoadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required()\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n        else setLoadingInitial(false);\r\n    }, [id, loadActivity, setLoadingInitial])\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if(!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        }else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading Activity...' />;\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal'/>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Categorye' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date' \r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa' />\r\n                        <Header content='Location Details' sub color='teal'/>\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button disabled={isSubmitting || !dirty || !isValid} loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='submit' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled'>\r\n                    </Label>\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ?\r\n                    (<>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-Activite Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button disabled={activity.isCancelled} as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>) : activity.isGoing ?\r\n                        (\r\n                            <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                        )\r\n                        : (\r\n                            <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                        )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedSidebar({activity : { attendees, host }}: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            { attendee.username === host?.username &&\r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={ attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n  const {activityStore} = useStore();\r\n  const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n  const {id} = useParams<{id: string}>();\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity ();\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n          <ActivityDetailedHeader activity={activity}/>\r\n          <ActivityDetailedInfo activity={activity}/>\r\n          <ActivityDetailedChat activityId={activity.id}/>\r\n      </Grid.Column>\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSidebar activity={activity}/>\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n\r\n    const[errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'Buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'Buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'Buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'Buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'Activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'Activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            { errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, Header, Icon, Button } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - We've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities Page !\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError(){\r\n    const {commonStore} = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            \r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal, Transition } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\ninterface Props {\r\n    animation : string;\r\n    duration : string;\r\n}\r\n\r\nexport default observer(function ModalContainer({animation, duration} : Props){\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Transition visible={modalStore.modal.open} animation={animation} duration={duration}>\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n        </Transition>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n            onSubmit={values => { updateProfile(values).then(() => { setEditMode(false); }) }}\r\n            validationSchema={Yup.object({ displayName: Yup.string().required() })}>\r\n\r\n            {({ isSubmitting, isValid, dirty }) =>\r\n            (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button positive type='submit' loading={isSubmitting} content='Update profile'\r\n                        floated='right' disabled={!isValid || !dirty} />\r\n                </Form>\r\n            )}\r\n            \r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { TabProps, Tab, Grid, Header, Card, Image } from 'semantic-ui-react';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { format } from 'date-fns';\r\n\r\n\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{minHeight: 100, objectFit:'cover'}}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following` }/>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper : Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCrooper({imagePreview, setCropper}: Props){\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width:'100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}            \r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop Photo here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCrooper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\n\r\ninterface Props {\r\n    loading : boolean;\r\n    uploadPhoto: (file : Blob) => void;\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto} : Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.Preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCrooper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                { files && files.length > 0 && \r\n                <>\r\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                        <Button onClick={() => setFiles([])} icon='close'/>\r\n                    </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) { \r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)} />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash' \r\n                                                loading = {target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                                />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile : Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore : {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer animation='zoom' duration='500'/>\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key!} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport './app/layout/styles.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n      <Router history={history}> \n       <ScrollToTop />\n        <App />\n      </Router>\n    </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}